{"version":3,"file":"static/js/509.f3aa2eaa.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/style/ContactForm.module.css?254a","../node_modules/nanoid/index.browser.js","redux/selectors.jsx","components/ContactForm.jsx","components/ContactList.jsx","components/Filter.jsx","pages/PhoneBook.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__WRzqE\",\"label\":\"ContactForm_label__XxNpl\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const selectContacts = state => state.contacts.items;\nexport const selectFilteredContacts = state => state.filter.value;\nexport const selectIsLoading = state => state.contacts.isLoading;\n","import React, { useState } from 'react'\nimport css from '../style/ContactForm.module.css';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'service/contactData';\nimport { selectContacts } from '../redux/selectors';\n\n\n\nexport function ContactForm() {\n  const [name, setName] = useState('')\n  const [number, setNumber] = useState('')\n\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const onSubmit = e => {\n    const id = nanoid();\n    const name = e.name;\n    const number = e.number;\n    const contactsLists = [...contacts];\n\n    if (\n      contactsLists.findIndex(\n        contact =>\n          name.toLowerCase().replace(/ /g, '') ===\n          contact.name.toLowerCase().replace(/ /g, '')\n      ) !== -1\n    ) {\n      alert(`${name} is already in contacts.`);\n    } else {\n      dispatch(addContact({ id, name, number }));\n      setName('')\n      setNumber('')\n    }\n  };\n\n  const contactsChange = event => { \n    switch (event.target.name) {\n      case 'name':\n        setName(event.target.value);\n        break;\n      case 'number':\n        setNumber(event.target.value);\n        break;\n      \n      default:return\n    }\n  }\n\n  const contactSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    onSubmit({name, number});\n    form.reset();\n    \n  };\n  \n    return (\n      <form className={css.contactForm} onSubmit={contactSubmit}>\n        <label className={css.label}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            placeholder=\"Enter name\"\n            value={name}\n            onChange={contactsChange}\n          />\n        </label>\n\n        <label className={css.label}>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            placeholder=\"Enter phone number\"\n            value={number}\n            onChange={contactsChange}\n          />\n        </label>\n\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  \n}\n\nexport default ContactForm;","import PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { removeContact } from 'service/contactData';\nimport {\n  selectFilteredContacts,\n  selectContacts,\n} from '../redux/selectors';\nimport { useEffect } from 'react';\nimport { fetchContact } from 'service/contactData';\n\nexport const ContactList = () => {\n  const filterValue = useSelector(selectFilteredContacts);\n  const contacts = useSelector(selectContacts)\n  const dispatch = useDispatch();\n\n  \n  useEffect(() => {\n    dispatch(fetchContact());\n  }, [dispatch]);\n\n\n  const filterContactsList = contacts.filter(contact => {\n    return contact.name.toLowerCase().includes(filterValue);\n  });\n  return (\n    <div>\n      <ul>\n        {filterContactsList.map(contact => (\n          <li key={nanoid()}>\n            {contact.name}: {contact.number}\n            <button\n              type=\"button\"\n              onClick={()=> dispatch(removeContact(contact.id))}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactList;","import { useDispatch } from 'react-redux';\nimport { update } from 'redux/filterSlice';\nimport { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from '../redux/selectors';\n\n\nexport const Filter = () => {\n  const dispatch = useDispatch()\n  const filterValue = useSelector(selectFilteredContacts);\n  return (\n    <div>\n      <label>Find contacts by name </label>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Enter filter\"\n        value={filterValue}\n        onChange={e => dispatch(update(e.target.value))}\n      />\n    </div>\n  );\n};\n\nexport default Filter","import ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\n\nconst PhoneBook = () => {\n  return (\n    <div>\n      <br />\n      <ContactForm />\n      <br />\n      <Filter />\n      <br />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default PhoneBook;"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","selectContacts","state","contacts","items","selectFilteredContacts","filter","value","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","contactsChange","event","target","className","css","onSubmit","e","preventDefault","form","currentTarget","findIndex","contact","toLowerCase","replace","alert","addContact","reset","type","pattern","title","required","placeholder","onChange","filterValue","useEffect","fetchContact","filterContactsList","includes","map","onClick","removeContact","update"],"sourceRoot":""}